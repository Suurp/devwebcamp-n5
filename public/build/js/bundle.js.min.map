{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","busqueda","categoria_id","value","dia","seleccionarHora","e","horaPrevia","classList","remove","target","add","dataset","horaId","obtenerHorasDisponibles","eventos","listadoHoras","forEach","li","hora","removeEventListener","horasTomadas","map","evento","hora_id","Array","from","filter","includes","addEventListener","buscarEventos","async","url","resultado","fetch","json","error","console","terminoBusqueda","name","Object","values","id","horaSeleccionada","onclick","iniciarApp","ponentesInput","ponenteHidden","seleccionarPonente","textContent","ponente","ponentePrevio","ponenteId","buscarPonentes","length","expresion","RegExp","normalize","replace","ponentesFiltrados","ponentes","ponenteNombre","nombre","toLowerCase","test","listadoPonentes","innerHTML","ponenteHTML","createElement","appendChild","noResultados","mostrarPonentes","obtenerPonentes","respuesta","arrayPonentes","apellido","formatearPonentes","obtenerPonente","ponenteDOM","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","ondblclick","eliminarTag","ontouchend","actualizarInputHidden","join","tagToRemove","split","key","trim","preventDefault","newTag"],"mappings":"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","file":"bundle.js","sourcesContent":["(() => {\r\n\t// Referencias a elementos del DOM\r\n\tconst horas = document.querySelector(\"#horas\");\r\n\r\n\tif (horas) {\r\n\t\tconst categoria = document.querySelector(\"#categoria\");\r\n\t\tconst dias = document.querySelectorAll('[name=\"dia\"]');\r\n\t\tconst inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n\t\tconst inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n\r\n\t\t// Objeto para almacenar la búsqueda actual\r\n\t\tlet busqueda = {\r\n\t\t\tcategoria_id: +categoria.value || \"\", // Convertir a número o usar cadena vacía\r\n\t\t\tdia: +inputHiddenDia.value || \"\", // Convertir a número o usar cadena vacía\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Maneja la selección de una hora en la lista.\r\n\t\t * @param {Event} e - El evento de clic en una hora.\r\n\t\t */\r\n\t\tconst seleccionarHora = (e) => {\r\n\t\t\t// Remover clase de hora previamente seleccionada\r\n\t\t\tconst horaPrevia = document.querySelector(\r\n\t\t\t\t\".horas__hora--seleccionada\"\r\n\t\t\t);\r\n\t\t\tif (horaPrevia) {\r\n\t\t\t\thoraPrevia.classList.remove(\"horas__hora--seleccionada\");\r\n\t\t\t}\r\n\r\n\t\t\t// Agregar clase de seleccionado a la hora actual\r\n\t\t\te.target.classList.add(\"horas__hora--seleccionada\");\r\n\r\n\t\t\t// Actualizar el campo oculto de hora con el ID de la hora seleccionada\r\n\t\t\tinputHiddenHora.value = e.target.dataset.horaId;\r\n\r\n\t\t\t// Llenar el campo oculto de día con el valor del día seleccionado\r\n\t\t\tinputHiddenDia.value = document.querySelector(\r\n\t\t\t\t'[name=\"dia\"]:checked'\r\n\t\t\t).value;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Actualiza la lista de horas disponibles en base a los eventos obtenidos.\r\n\t\t * @param {Array} eventos - Array de objetos con los eventos obtenidos.\r\n\t\t */\r\n\t\tconst obtenerHorasDisponibles = (eventos) => {\r\n\t\t\t// Reiniciar la lista de horas, deshabilitándolas todas inicialmente\r\n\t\t\tconst listadoHoras = document.querySelectorAll(\"#horas li\");\r\n\t\t\tlistadoHoras.forEach((li) =>\r\n\t\t\t\tli.classList.add(\"horas__hora--deshabilitada\")\r\n\t\t\t);\r\n\r\n\t\t\t// Remover el evento de clic de todas las horas\r\n\t\t\tlistadoHoras.forEach((hora) =>\r\n\t\t\t\thora.removeEventListener(\"click\", seleccionarHora)\r\n\t\t\t);\r\n\r\n\t\t\t// Obtener los IDs de las horas que están ya ocupadas\r\n\t\t\tconst horasTomadas = eventos.map((evento) => evento.hora_id);\r\n\r\n\t\t\t// Filtrar y habilitar las horas que no están ocupadas\r\n\t\t\tconst resultado = Array.from(listadoHoras).filter(\r\n\t\t\t\t(li) => !horasTomadas.includes(li.dataset.horaId)\r\n\t\t\t);\r\n\t\t\tresultado.forEach((li) =>\r\n\t\t\t\tli.classList.remove(\"horas__hora--deshabilitada\")\r\n\t\t\t);\r\n\r\n\t\t\t// Agregar el evento de clic a las horas disponibles\r\n\t\t\tconst horasDisponibles = document.querySelectorAll(\r\n\t\t\t\t\"#horas li:not(.horas__hora--deshabilitada)\"\r\n\t\t\t);\r\n\t\t\thorasDisponibles.forEach((hora) => {\r\n\t\t\t\thora.addEventListener(\"click\", seleccionarHora);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Busca eventos en el servidor según el día y categoría seleccionados.\r\n\t\t */\r\n\t\tconst buscarEventos = async () => {\r\n\t\t\tconst { dia, categoria_id } = busqueda;\r\n\t\t\tconst url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst resultado = await fetch(url);\r\n\t\t\t\tconst eventos = await resultado.json();\r\n\t\t\t\tobtenerHorasDisponibles(eventos);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(\"Error al obtener los eventos:\", error);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Maneja cambios en los campos de búsqueda (día y categoría).\r\n\t\t * @param {Event} e - El evento de cambio en el campo de búsqueda.\r\n\t\t */\r\n\t\tconst terminoBusqueda = (e) => {\r\n\t\t\tbusqueda[e.target.name] = e.target.value;\r\n\r\n\t\t\t// Reiniciar los campos ocultos y la selección de horas\r\n\t\t\tinputHiddenHora.value = \"\";\r\n\t\t\tinputHiddenDia.value = \"\";\r\n\r\n\t\t\tconst horaPrevia = document.querySelector(\r\n\t\t\t\t\".horas__hora--seleccionada\"\r\n\t\t\t);\r\n\t\t\tif (horaPrevia) {\r\n\t\t\t\thoraPrevia.classList.remove(\"horas__hora--seleccionada\");\r\n\t\t\t}\r\n\r\n\t\t\t// Si la búsqueda está incompleta, no hacer nada\r\n\t\t\tif (Object.values(busqueda).includes(\"\")) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Buscar eventos con los nuevos criterios de búsqueda\r\n\t\t\tbuscarEventos();\r\n\t\t};\r\n\r\n\t\t// Si ya hay una búsqueda completa, buscar eventos inmediatamente\r\n\t\tif (!Object.values(busqueda).includes(\"\")) {\r\n\t\t\tconst iniciarApp = async () => {\r\n\t\t\t\tawait buscarEventos();\r\n\r\n\t\t\t\tconst id = inputHiddenHora.value;\r\n\r\n\t\t\t\tconst horaSeleccionada = document.querySelector(\r\n\t\t\t\t\t`[data-hora-id=\"${id}\"]`\r\n\t\t\t\t);\r\n\r\n\t\t\t\thoraSeleccionada.classList.remove(\"horas__hora--deshabilitada\");\r\n\t\t\t\thoraSeleccionada.classList.add(\"horas__hora--seleccionada\");\r\n\r\n\t\t\t\thoraSeleccionada.onclick = seleccionarHora;\r\n\t\t\t};\r\n\r\n\t\t\tiniciarApp();\r\n\t\t}\r\n\r\n\t\t// Agregar eventos de cambio a los selectores de categoría y día\r\n\t\tcategoria.addEventListener(\"change\", terminoBusqueda);\r\n\t\tdias.forEach((dia) => {\r\n\t\t\tdia.addEventListener(\"change\", terminoBusqueda);\r\n\t\t});\r\n\t}\r\n})();\r\n","(() => {\r\n\t// Referencias a elementos del DOM\r\n\tconst ponentesInput = document.querySelector(\"#ponentes\");\r\n\tconst ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\r\n\r\n\t/**\r\n\t * Maneja la selección de un ponente en la lista.\r\n\t * @param {Event} e - El evento de clic en un ponente.\r\n\t */\r\n\tconst seleccionarPonente = (e) => {\r\n\t\t// Establece el valor del input con el nombre del ponente seleccionado\r\n\t\tponentesInput.value = e.target.textContent;\r\n\t\tconst ponente = e.target;\r\n\r\n\t\t// Remueve la clase de selección previa\r\n\t\tconst ponentePrevio = document.querySelector(\r\n\t\t\t\".listado-ponentes__ponente--seleccionado\"\r\n\t\t);\r\n\t\tif (ponentePrevio) {\r\n\t\t\tponentePrevio.classList.remove(\r\n\t\t\t\t\"listado-ponentes__ponente--seleccionado\"\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Añade la clase de seleccionado al nuevo ponente y actualiza el valor oculto\r\n\t\tponente.classList.add(\"listado-ponentes__ponente--seleccionado\");\r\n\t\tponenteHidden.value = ponente.dataset.ponenteId;\r\n\t};\r\n\r\n\t/**\r\n\t * Muestra los ponentes filtrados en la lista.\r\n\t */\r\n\tconst mostrarPonentes = () => {\r\n\t\tconst listadoPonentes = document.querySelector(\"#listado-ponentes\");\r\n\t\tlistadoPonentes.innerHTML = \"\"; // Limpiar lista de ponentes\r\n\r\n\t\tif (ponentesFiltrados.length > 0) {\r\n\t\t\t// Crear elementos LI para cada ponente filtrado\r\n\t\t\tponentesFiltrados.forEach((ponente) => {\r\n\t\t\t\tconst ponenteHTML = document.createElement(\"LI\");\r\n\t\t\t\tponenteHTML.classList.add(\"listado-ponentes__ponente\");\r\n\t\t\t\tponenteHTML.textContent = ponente.nombre;\r\n\t\t\t\tponenteHTML.dataset.ponenteId = ponente.id;\r\n\t\t\t\tponenteHTML.addEventListener(\"click\", seleccionarPonente);\r\n\t\t\t\tlistadoPonentes.appendChild(ponenteHTML);\r\n\t\t\t});\r\n\t\t} else if (ponentesInput.value.length > 3) {\r\n\t\t\t// Mostrar mensaje de \"no resultados\" si no hay coincidencias\r\n\t\t\tconst noResultados = document.createElement(\"P\");\r\n\t\t\tnoResultados.classList.add(\"listado-ponentes__no-resultados\");\r\n\t\t\tnoResultados.textContent = \"No hay resultados para tu búsqueda\";\r\n\t\t\tlistadoPonentes.appendChild(noResultados);\r\n\t\t}\r\n\r\n\t\t// Limpiar el valor oculto\r\n\t\tponenteHidden.value = \"\";\r\n\t};\r\n\r\n\t/**\r\n\t * Filtra los ponentes según el valor del input.\r\n\t * @param {Event} e - El evento de entrada en el input.\r\n\t */\r\n\tconst buscarPonentes = (e) => {\r\n\t\tconst busqueda = e.target.value;\r\n\t\tif (busqueda.length > 3) {\r\n\t\t\t// Normalizar y crear expresión regular para la búsqueda\r\n\t\t\tconst expresion = new RegExp(\r\n\t\t\t\tbusqueda.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"),\r\n\t\t\t\t\"i\"\r\n\t\t\t);\r\n\t\t\tponentesFiltrados = ponentes.filter((ponente) => {\r\n\t\t\t\tconst ponenteNombre = ponente.nombre\r\n\t\t\t\t\t.normalize(\"NFD\")\r\n\t\t\t\t\t.replace(/[\\u0300-\\u036f]/g, \"\")\r\n\t\t\t\t\t.toLowerCase();\r\n\t\t\t\treturn expresion.test(ponenteNombre);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tponentesFiltrados = [];\r\n\t\t}\r\n\r\n\t\t// Mostrar los resultados filtrados\r\n\t\tmostrarPonentes();\r\n\t};\r\n\r\n\t/**\r\n\t * Formatea los datos de los ponentes para su uso en el script.\r\n\t * @param {Array} arrayPonentes - Array de objetos con datos de los ponentes.\r\n\t */\r\n\tconst formatearPonentes = (arrayPonentes = []) => {\r\n\t\tponentes = arrayPonentes.map((ponente) => ({\r\n\t\t\tnombre: `${ponente.nombre} ${ponente.apellido}`,\r\n\t\t\tid: ponente.id,\r\n\t\t}));\r\n\t};\r\n\r\n\t/**\r\n\t * Obtiene los datos de los ponentes desde la API.\r\n\t */\r\n\tconst obtenerPonentes = async () => {\r\n\t\tconst url = `/api/ponentes`;\r\n\r\n\t\ttry {\r\n\t\t\tconst respuesta = await fetch(url);\r\n\t\t\tconst resultado = await respuesta.json();\r\n\t\t\tformatearPonentes(resultado);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error al obtener los ponentes:\", error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst obtenerPonente = async (id) => {\r\n\t\tconst url = `/api/ponente?id=${id}`;\r\n\t\ttry {\r\n\t\t\tconst respuesta = await fetch(url);\r\n\t\t\tconst resultado = await respuesta.json();\r\n\t\t\treturn resultado;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error al obtener los ponentes:\", error);\r\n\t\t}\r\n\t};\r\n\r\n\t// Inicializa la funcionalidad si el input de ponentes existe\r\n\tif (ponentesInput) {\r\n\t\tlet ponentes = [];\r\n\t\tlet ponentesFiltrados = [];\r\n\r\n\t\tobtenerPonentes();\r\n\t\tponentesInput.addEventListener(\"input\", buscarPonentes);\r\n\r\n\t\tif (ponenteHidden.value) {\r\n\t\t\t(async (e) => {\r\n\t\t\t\tconst listadoPonentes =\r\n\t\t\t\t\tdocument.querySelector(\"#listado-ponentes\");\r\n\t\t\t\tconst ponente = await obtenerPonente(ponenteHidden.value);\r\n\t\t\t\tconst { nombre, apellido } = ponente;\r\n\r\n\t\t\t\tconst ponenteDOM = document.createElement(\"LI\");\r\n\t\t\t\tponenteDOM.classList.add(\r\n\t\t\t\t\t\"listado-ponentes__ponente\",\r\n\t\t\t\t\t\"listado-ponentes__ponente--seleccionado\"\r\n\t\t\t\t);\r\n\t\t\t\tponenteDOM.textContent = `${nombre} ${apellido}`;\r\n\t\t\t\tlistadoPonentes.appendChild(ponenteDOM);\r\n\t\t\t\tponentesInput.value = `${nombre} ${apellido}`;\r\n\t\t\t})();\r\n\t\t}\r\n\t}\r\n})();\r\n","(() => {\r\n    // Selecciona el input donde se escribirán las etiquetas\r\n    const tagsInput = document.querySelector(\"#tags_input\");\r\n\r\n    // Si no existe el input, no continúa con la ejecución\r\n    if (!tagsInput) return;\r\n\r\n    // Selecciona el contenedor donde se mostrarán las etiquetas\r\n    const tagsDiv = document.querySelector(\"#tags\");\r\n    // Selecciona el input oculto para almacenar las etiquetas en formato de texto\r\n    const tagsInputHidden = document.querySelector(\"[name='tags']\");\r\n    // Inicializa el array para almacenar las etiquetas\r\n    let tags = [];\r\n\r\n    // Función para guardar la etiqueta cuando se presiona la coma\r\n    const guardarTag = (e) => {\r\n        // Verifica si la tecla presionada es la coma y si el valor del input no está vacío\r\n        if (e.key === ',' && e.target.value.trim() !== \"\") {\r\n            e.preventDefault(); // Previene el comportamiento por defecto de la tecla\r\n\r\n            const newTag = e.target.value.trim();\r\n\r\n            // Verifica si la etiqueta ya existe\r\n            if (!tags.includes(newTag)) {\r\n                // Agrega la etiqueta al array de etiquetas\r\n                tags = [...tags, newTag];\r\n                // Limpia el valor del input\r\n                e.target.value = '';\r\n                // Muestra las etiquetas actualizadas\r\n                mostrarTags();\r\n            } else {\r\n                // Opcional: informar al usuario que la etiqueta ya existe\r\n                e.target.value = '';\r\n            }\r\n        }\r\n    };\r\n\r\n    // Función para mostrar las etiquetas en el contenedor\r\n    const mostrarTags = () => {\r\n        tagsDiv.textContent = \"\"; // Limpia el contenido del contenedor\r\n\r\n        // Crea y añade cada etiqueta al contenedor\r\n        tags.forEach(tag => {\r\n            const etiqueta = document.createElement('LI'); // Crea un elemento de lista\r\n            etiqueta.classList.add('formulario__tag'); // Añade una clase CSS\r\n            etiqueta.textContent = tag; // Establece el texto de la etiqueta\r\n            etiqueta.ondblclick = eliminarTag; // Asigna el evento de doble clic para eliminar la etiqueta\r\n            etiqueta.ontouchend = eliminarTag; // Asigna el evento de finalización de toque para eliminar la etiqueta en móviles\r\n            tagsDiv.appendChild(etiqueta); // Añade la etiqueta al contenedor\r\n        });\r\n\r\n        // Actualiza el valor del input oculto con las etiquetas en formato de texto\r\n        actualizarInputHidden();\r\n    };\r\n\r\n    // Función para actualizar el valor del input oculto\r\n    const actualizarInputHidden = () => {\r\n        tagsInputHidden.value = tags.join(','); // Convierte el array de etiquetas en una cadena\r\n    };\r\n\r\n    // Función para eliminar una etiqueta al hacer doble clic o al finalizar el toque en móviles\r\n    const eliminarTag = (e) => {\r\n        const tagToRemove = e.target.textContent; // Obtiene el texto de la etiqueta a eliminar\r\n        // Filtra el array de etiquetas para eliminar la etiqueta seleccionada\r\n        tags = tags.filter(tag => tag !== tagToRemove);\r\n        // Muestra las etiquetas actualizadas\r\n        mostrarTags();\r\n    };\r\n\r\n    //Recuperar tags\r\n    if(tagsInputHidden.value !== \"\") {\r\n        tags = tagsInputHidden.value.split(\",\");\r\n        mostrarTags();\r\n    }\r\n\r\n    // Añade el evento de escucha al input para detectar la tecla presionada\r\n    tagsInput.addEventListener(\"keypress\", guardarTag);\r\n})();\r\n"]}