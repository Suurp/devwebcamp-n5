{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","seleccionarHora","e","horaPrevia","classList","remove","target","add","value","dataset","horaId","obtenerHorasDisponibles","eventos","listadoHoras","forEach","li","hora","removeEventListener","horasTomadas","map","evento","hora_id","Array","from","filter","includes","addEventListener","buscarEventos","async","url","resultado","fetch","json","terminoBusqueda","name","Object","values","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","textContent","tag","etiqueta","createElement","ondblclick","eliminarTag","ontouchend","appendChild","actualizarInputHidden","join","tagToRemove","split","key","trim","preventDefault","newTag"],"mappings":"AAAA,MAGA,GAFAA,SAAAC,cAAA,UAEA,CACA,IAAAC,EAAA,CACAC,aAAA,GACAC,IAAA,IAGA,MAAAC,EAAAL,SAAAC,cAAA,cACAK,EAAAN,SAAAO,iBAAA,gBACAC,EAAAR,SAAAC,cAAA,mBACAQ,EAAAT,SAAAC,cAAA,oBAEAS,EAAAC,IACA,MAAAC,EAAAZ,SAAAC,cACA,8BAGAW,GACAA,EAAAC,UAAAC,OAAA,6BAIAH,EAAAI,OAAAF,UAAAG,IAAA,6BAEAP,EAAAQ,MAAAN,EAAAI,OAAAG,QAAAC,OAGAX,EAAAS,MAAAjB,SAAAC,cACA,wBACAgB,OAGAG,EAAAC,IAEA,MAAAC,EAAAtB,SAAAO,iBAAA,aACAe,EAAAC,QAAAC,GACAA,EAAAX,UAAAG,IAAA,+BAGAhB,SAAAO,iBAAA,aACAgB,QAAAE,GACAA,EAAAC,oBAAA,QAAAhB,IAIA,MAAAiB,EAAAN,EAAAO,IAAAC,GAAAA,EAAAC,SAEAC,MAAAC,KAAAV,GAEAW,OACAT,IAAAG,EAAAO,SAAAV,EAAAN,QAAAC,SAEAI,QAAAC,GACAA,EAAAX,UAAAC,OAAA,+BAGAd,SAAAO,iBACA,8CAEAgB,QAAAE,IACAA,EAAAU,iBAAA,QAAAzB,MAIA0B,EAAAC,UACA,MAAAjC,IAAAA,EAAAD,aAAAA,GAAAD,EAEAoC,EAAA,+BAAAlC,kBAAAD,IAEAoC,QAAAC,MAAAF,GACAjB,QAAAkB,EAAAE,OAEArB,EAAAC,IAGAqB,EAAA/B,IACAT,EAAAS,EAAAI,OAAA4B,MAAAhC,EAAAI,OAAAE,MAGAR,EAAAQ,MAAA,GACAT,EAAAS,MAAA,GAEA,MAAAL,EAAAZ,SAAAC,cACA,8BAGAW,GACAA,EAAAC,UAAAC,OAAA,6BAGA8B,OAAAC,OAAA3C,GAAAgC,SAAA,KAIAE,KAGA/B,EAAA8B,iBAAA,SAAAO,GAEApC,EAAAiB,QAAAnB,IACAA,EAAA+B,iBAAA,SAAAO,OAtGA,GCEA1C,SAAAC,cAAA,aCFA,MAEA,MAAA6C,EAAA9C,SAAAC,cAAA,eAGA,IAAA6C,EAAA,OAGA,MAAAC,EAAA/C,SAAAC,cAAA,SAEA+C,EAAAhD,SAAAC,cAAA,iBAEA,IAAAgD,EAAA,GAGA,MAuBAC,EAAA,KACAH,EAAAI,YAAA,GAGAF,EAAA1B,QAAA6B,IACA,MAAAC,EAAArD,SAAAsD,cAAA,MACAD,EAAAxC,UAAAG,IAAA,mBACAqC,EAAAF,YAAAC,EACAC,EAAAE,WAAAC,EACAH,EAAAI,WAAAD,EACAT,EAAAW,YAAAL,KAIAM,KAIAA,EAAA,KACAX,EAAA/B,MAAAgC,EAAAW,KAAA,MAIAJ,EAAA7C,IACA,MAAAkD,EAAAlD,EAAAI,OAAAoC,YAEAF,EAAAA,EAAAhB,OAAAmB,GAAAA,IAAAS,GAEAX,KAIA,KAAAF,EAAA/B,QACAgC,EAAAD,EAAA/B,MAAA6C,MAAA,KACAZ,KAIAJ,EAAAX,iBAAA,WA7DAxB,IAEA,GAAA,MAAAA,EAAAoD,KAAA,KAAApD,EAAAI,OAAAE,MAAA+C,OAAA,CACArD,EAAAsD,iBAEA,MAAAC,EAAAvD,EAAAI,OAAAE,MAAA+C,OAGAf,EAAAf,SAAAgC,GASAvD,EAAAI,OAAAE,MAAA,IAPAgC,EAAA,IAAAA,EAAAiB,GAEAvD,EAAAI,OAAAE,MAAA,GAEAiC,SA7BA","file":"bundle.js","sourcesContent":["(() => {\r\n\tconst horas = document.querySelector(\"#horas\");\r\n\r\n\tif (horas) {\r\n\t\tlet busqueda = {\r\n\t\t\tcategoria_id: \"\",\r\n\t\t\tdia: \"\",\r\n\t\t};\r\n\r\n\t\tconst categoria = document.querySelector(\"#categoria\");\r\n\t\tconst dias = document.querySelectorAll('[name=\"dia\"]');\r\n\t\tconst inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n\t\tconst inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n\r\n\t\tconst seleccionarHora = (e) => {\r\n\t\t\tconst horaPrevia = document.querySelector(\r\n\t\t\t\t\".horas__hora--seleccionada\"\r\n\t\t\t);\r\n\r\n\t\t\tif (horaPrevia) {\r\n\t\t\t\thoraPrevia.classList.remove(\"horas__hora--seleccionada\");\r\n\t\t\t}\r\n\r\n\t\t\t// Agregar clase de seleccionado\r\n\t\t\te.target.classList.add(\"horas__hora--seleccionada\");\r\n\r\n\t\t\tinputHiddenHora.value = e.target.dataset.horaId;\r\n\r\n\t\t\t// Llenar campo oculto de dia\r\n\t\t\tinputHiddenDia.value = document.querySelector(\r\n\t\t\t\t'[name=\"dia\"]:checked'\r\n\t\t\t).value;\r\n\t\t};\r\n\r\n\t\tconst obtenerHorasDisponibles = (eventos) => {\r\n\t\t\t//Reiniciar las horas\r\n\t\t\tconst listadoHoras = document.querySelectorAll(\"#horas li\");\r\n\t\t\tlistadoHoras.forEach((li) =>\r\n\t\t\t\tli.classList.add(\"horas__hora--deshabilitada\")\r\n\t\t\t);\r\n            \r\n            const horasDeshabilitadas = document.querySelectorAll(\"#horas li\");\r\n\t\t\thorasDeshabilitadas.forEach((hora) =>\r\n\t\t\t\thora.removeEventListener(\"click\", seleccionarHora)\r\n\t\t\t);\r\n\r\n\t\t\t// Comprobar eventos ya tomados y quitar la variable de deshabilitado\r\n\t\t\tconst horasTomadas = eventos.map((evento) => evento.hora_id);\r\n\r\n\t\t\tconst listadoHorasArray = Array.from(listadoHoras);\r\n\r\n\t\t\tconst resultado = listadoHorasArray.filter(\r\n\t\t\t\t(li) => !horasTomadas.includes(li.dataset.horaId)\r\n\t\t\t);\r\n\t\t\tresultado.forEach((li) =>\r\n\t\t\t\tli.classList.remove(\"horas__hora--deshabilitada\")\r\n\t\t\t);\r\n\r\n\t\t\tconst horasDisponibles = document.querySelectorAll(\r\n\t\t\t\t\"#horas li:not(.horas__hora--deshabilitada)\"\r\n\t\t\t);\r\n\t\t\thorasDisponibles.forEach((hora) => {\r\n\t\t\t\thora.addEventListener(\"click\", seleccionarHora);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tconst buscarEventos = async () => {\r\n\t\t\tconst { dia, categoria_id } = busqueda;\r\n\r\n\t\t\tconst url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n\r\n\t\t\tconst resultado = await fetch(url);\r\n\t\t\tconst eventos = await resultado.json();\r\n\r\n\t\t\tobtenerHorasDisponibles(eventos);\r\n\t\t};\r\n\r\n\t\tconst terminoBusqueda = (e) => {\r\n\t\t\tbusqueda[e.target.name] = e.target.value;\r\n\r\n\t\t\t// Reiniciar los campos ocultos y el selector de horas\r\n\t\t\tinputHiddenHora.value = \"\";\r\n\t\t\tinputHiddenDia.value = \"\";\r\n\r\n\t\t\tconst horaPrevia = document.querySelector(\r\n\t\t\t\t\".horas__hora--seleccionada\"\r\n\t\t\t);\r\n\r\n\t\t\tif (horaPrevia) {\r\n\t\t\t\thoraPrevia.classList.remove(\"horas__hora--seleccionada\");\r\n\t\t\t}\r\n\r\n\t\t\tif (Object.values(busqueda).includes(\"\")) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tbuscarEventos();\r\n\t\t};\r\n\r\n\t\tcategoria.addEventListener(\"change\", terminoBusqueda);\r\n\r\n\t\tdias.forEach((dia) => {\r\n\t\t\tdia.addEventListener(\"change\", terminoBusqueda);\r\n\t\t});\r\n\t}\r\n})();\r\n","(() => {\r\n\r\n    const ponentesInput = document.querySelector('#ponentes');\r\n\r\n})();","(() => {\r\n    // Selecciona el input donde se escribirán las etiquetas\r\n    const tagsInput = document.querySelector(\"#tags_input\");\r\n\r\n    // Si no existe el input, no continúa con la ejecución\r\n    if (!tagsInput) return;\r\n\r\n    // Selecciona el contenedor donde se mostrarán las etiquetas\r\n    const tagsDiv = document.querySelector(\"#tags\");\r\n    // Selecciona el input oculto para almacenar las etiquetas en formato de texto\r\n    const tagsInputHidden = document.querySelector(\"[name='tags']\");\r\n    // Inicializa el array para almacenar las etiquetas\r\n    let tags = [];\r\n\r\n    // Función para guardar la etiqueta cuando se presiona la coma\r\n    const guardarTag = (e) => {\r\n        // Verifica si la tecla presionada es la coma y si el valor del input no está vacío\r\n        if (e.key === ',' && e.target.value.trim() !== \"\") {\r\n            e.preventDefault(); // Previene el comportamiento por defecto de la tecla\r\n\r\n            const newTag = e.target.value.trim();\r\n\r\n            // Verifica si la etiqueta ya existe\r\n            if (!tags.includes(newTag)) {\r\n                // Agrega la etiqueta al array de etiquetas\r\n                tags = [...tags, newTag];\r\n                // Limpia el valor del input\r\n                e.target.value = '';\r\n                // Muestra las etiquetas actualizadas\r\n                mostrarTags();\r\n            } else {\r\n                // Opcional: informar al usuario que la etiqueta ya existe\r\n                e.target.value = '';\r\n            }\r\n        }\r\n    };\r\n\r\n    // Función para mostrar las etiquetas en el contenedor\r\n    const mostrarTags = () => {\r\n        tagsDiv.textContent = \"\"; // Limpia el contenido del contenedor\r\n\r\n        // Crea y añade cada etiqueta al contenedor\r\n        tags.forEach(tag => {\r\n            const etiqueta = document.createElement('LI'); // Crea un elemento de lista\r\n            etiqueta.classList.add('formulario__tag'); // Añade una clase CSS\r\n            etiqueta.textContent = tag; // Establece el texto de la etiqueta\r\n            etiqueta.ondblclick = eliminarTag; // Asigna el evento de doble clic para eliminar la etiqueta\r\n            etiqueta.ontouchend = eliminarTag; // Asigna el evento de finalización de toque para eliminar la etiqueta en móviles\r\n            tagsDiv.appendChild(etiqueta); // Añade la etiqueta al contenedor\r\n        });\r\n\r\n        // Actualiza el valor del input oculto con las etiquetas en formato de texto\r\n        actualizarInputHidden();\r\n    };\r\n\r\n    // Función para actualizar el valor del input oculto\r\n    const actualizarInputHidden = () => {\r\n        tagsInputHidden.value = tags.join(','); // Convierte el array de etiquetas en una cadena\r\n    };\r\n\r\n    // Función para eliminar una etiqueta al hacer doble clic o al finalizar el toque en móviles\r\n    const eliminarTag = (e) => {\r\n        const tagToRemove = e.target.textContent; // Obtiene el texto de la etiqueta a eliminar\r\n        // Filtra el array de etiquetas para eliminar la etiqueta seleccionada\r\n        tags = tags.filter(tag => tag !== tagToRemove);\r\n        // Muestra las etiquetas actualizadas\r\n        mostrarTags();\r\n    };\r\n\r\n    //Recuperar tags\r\n    if(tagsInputHidden.value !== \"\") {\r\n        tags = tagsInputHidden.value.split(\",\");\r\n        mostrarTags();\r\n    }\r\n\r\n    // Añade el evento de escucha al input para detectar la tecla presionada\r\n    tagsInput.addEventListener(\"keypress\", guardarTag);\r\n})();\r\n"]}