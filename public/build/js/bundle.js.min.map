{"version":3,"sources":["tags.js"],"names":["tagsInput","document","querySelector","tagsDiv","tagsInputHidden","tags","mostrarTags","textContent","forEach","tag","etiqueta","createElement","classList","add","ondblclick","eliminarTag","ontouchend","appendChild","actualizarInputHidden","value","join","e","tagToRemove","target","filter","addEventListener","key","trim","preventDefault","newTag","includes"],"mappings":"AAAA,MAEA,MAAAA,EAAAC,SAAAC,cAAA,eAGA,IAAAF,EAAA,OAGA,MAAAG,EAAAF,SAAAC,cAAA,SAEAE,EAAAH,SAAAC,cAAA,iBAEA,IAAAG,EAAA,GAGA,MAuBAC,EAAA,KACAH,EAAAI,YAAA,GAGAF,EAAAG,QAAAC,IACA,MAAAC,EAAAT,SAAAU,cAAA,MACAD,EAAAE,UAAAC,IAAA,mBACAH,EAAAH,YAAAE,EACAC,EAAAI,WAAAC,EACAL,EAAAM,WAAAD,EACAZ,EAAAc,YAAAP,KAIAQ,KAIAA,EAAA,KACAd,EAAAe,MAAAd,EAAAe,KAAA,MAIAL,EAAAM,IACA,MAAAC,EAAAD,EAAAE,OAAAhB,YAEAF,EAAAA,EAAAmB,OAAAf,GAAAA,IAAAa,GAEAhB,KAIAN,EAAAyB,iBAAA,WAvDAJ,IAEA,GAAA,MAAAA,EAAAK,KAAA,KAAAL,EAAAE,OAAAJ,MAAAQ,OAAA,CACAN,EAAAO,iBAEA,MAAAC,EAAAR,EAAAE,OAAAJ,MAAAQ,OAGAtB,EAAAyB,SAAAD,GASAR,EAAAE,OAAAJ,MAAA,IAPAd,EAAA,IAAAA,EAAAwB,GAEAR,EAAAE,OAAAJ,MAAA,GAEAb,SA7BA","file":"bundle.js","sourcesContent":["(() => {\r\n    // Selecciona el input donde se escribirán las etiquetas\r\n    const tagsInput = document.querySelector(\"#tags_input\");\r\n\r\n    // Si no existe el input, no continúa con la ejecución\r\n    if (!tagsInput) return;\r\n\r\n    // Selecciona el contenedor donde se mostrarán las etiquetas\r\n    const tagsDiv = document.querySelector(\"#tags\");\r\n    // Selecciona el input oculto para almacenar las etiquetas en formato de texto\r\n    const tagsInputHidden = document.querySelector(\"[name='tags']\");\r\n    // Inicializa el array para almacenar las etiquetas\r\n    let tags = [];\r\n\r\n    // Función para guardar la etiqueta cuando se presiona la coma\r\n    const guardarTag = (e) => {\r\n        // Verifica si la tecla presionada es la coma y si el valor del input no está vacío\r\n        if (e.key === ',' && e.target.value.trim() !== \"\") {\r\n            e.preventDefault(); // Previene el comportamiento por defecto de la tecla\r\n\r\n            const newTag = e.target.value.trim();\r\n\r\n            // Verifica si la etiqueta ya existe\r\n            if (!tags.includes(newTag)) {\r\n                // Agrega la etiqueta al array de etiquetas\r\n                tags = [...tags, newTag];\r\n                // Limpia el valor del input\r\n                e.target.value = '';\r\n                // Muestra las etiquetas actualizadas\r\n                mostrarTags();\r\n            } else {\r\n                // Opcional: informar al usuario que la etiqueta ya existe\r\n                e.target.value = '';\r\n            }\r\n        }\r\n    };\r\n\r\n    // Función para mostrar las etiquetas en el contenedor\r\n    const mostrarTags = () => {\r\n        tagsDiv.textContent = \"\"; // Limpia el contenido del contenedor\r\n\r\n        // Crea y añade cada etiqueta al contenedor\r\n        tags.forEach(tag => {\r\n            const etiqueta = document.createElement('LI'); // Crea un elemento de lista\r\n            etiqueta.classList.add('formulario__tag'); // Añade una clase CSS\r\n            etiqueta.textContent = tag; // Establece el texto de la etiqueta\r\n            etiqueta.ondblclick = eliminarTag; // Asigna el evento de doble clic para eliminar la etiqueta\r\n            etiqueta.ontouchend = eliminarTag; // Asigna el evento de finalización de toque para eliminar la etiqueta en móviles\r\n            tagsDiv.appendChild(etiqueta); // Añade la etiqueta al contenedor\r\n        });\r\n\r\n        // Actualiza el valor del input oculto con las etiquetas en formato de texto\r\n        actualizarInputHidden();\r\n    };\r\n\r\n    // Función para actualizar el valor del input oculto\r\n    const actualizarInputHidden = () => {\r\n        tagsInputHidden.value = tags.join(','); // Convierte el array de etiquetas en una cadena\r\n    };\r\n\r\n    // Función para eliminar una etiqueta al hacer doble clic o al finalizar el toque en móviles\r\n    const eliminarTag = (e) => {\r\n        const tagToRemove = e.target.textContent; // Obtiene el texto de la etiqueta a eliminar\r\n        // Filtra el array de etiquetas para eliminar la etiqueta seleccionada\r\n        tags = tags.filter(tag => tag !== tagToRemove);\r\n        // Muestra las etiquetas actualizadas\r\n        mostrarTags();\r\n    };\r\n\r\n    // Añade el evento de escucha al input para detectar la tecla presionada\r\n    tagsInput.addEventListener(\"keypress\", guardarTag);\r\n})();\r\n"]}